{"version":3,"sources":["components/Movie.js","App.js","reportWebVitals.js","index.js"],"names":["HandleOverview","overview","length","slice","Movie","id","title","release","poster","genres","className","src","alt","App","state","isLoading","movies","getMovies","a","url","axios","get","data","results","setState","console","log","this","map","movie","release_date","poster_path","genre_ids","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAGMA,EAAiB,SAACC,GACpB,OAAIA,EAASC,OAAS,IACX,iCAAOD,EAASE,MAAM,EAAG,KAAzB,SAEA,+BAAOF,KAkCPG,EA9BD,SAAC,GAAqD,EAAnDC,GAAoD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,OAAQP,EAAuB,EAAvBA,SAAuB,EAAbQ,OACnD,OACI,sBAAKC,UAAU,cAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,qBAAKC,IAAG,4DAAuDH,GAAUI,IAAKN,MAElF,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,mBAAGI,UAAU,iBAAb,SAA+BH,IAM/B,mBAAGG,UAAU,kBAAb,SAAgCV,EAAeC,YCkChDY,G,wNApDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,gCAAAC,EAAA,4DACM,mCACVC,EAFI,6DACM,mCADN,mCAGSC,IAAMC,IAAIF,GAHnB,OAGJG,EAHI,OAIJN,EAASM,EAAKA,KAAKC,QAEzB,EAAKC,SAAS,CACZR,SACAD,WAAW,IAEbU,QAAQC,IAAI,EAAKZ,MAAME,QAVb,2C,uDAcZ,WACEW,KAAKV,c,oBAGP,WAAU,IACAF,EAAcY,KAAKb,MAAnBC,UACR,OACE,yBAASL,UAAU,YAAnB,SAEIK,EACE,qBAAKL,UAAU,UAAf,SACE,sBAAMA,UAAU,eAAhB,yBAEF,qBAAKA,UAAU,QAAf,SACGiB,KAAKb,MAAME,OAAOY,KAAI,SAACC,GACtB,OACE,cAAC,EAAD,CACExB,GAAIwB,EAAMxB,GACVC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMC,aACftB,OAAQqB,EAAME,YACd9B,SAAU4B,EAAM5B,SAChBQ,OAAQoB,EAAMG,uB,GA1ChBC,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ad5b8d2.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nconst HandleOverview = (overview) => {\n    if (overview.length > 180) {\n        return <span>{overview.slice(0, 180)}...</span>\n    } else {\n        return <span>{overview}</span>\n    }\n}\n\nconst Movie = ({ id, title, release, poster, overview, genres }) => {\n    return (\n        <div className=\"movie__item\">\n            <div className=\"movie__poster\">\n                <img src={`https://www.themoviedb.org/t/p/w440_and_h660_face/${poster}`} alt={title}/>\n            </div>\n            <div className=\"movie__content\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <p className=\"movie__release\">{release}</p>\n                {/* <p className=\"movie__genre\">{\n                    genres.map(genre => {\n                        return <span>{genre}</span>\n                    })\n                }</p> */}\n                <p className=\"movie__overview\">{HandleOverview(overview)}</p>\n            </div>\n        </div>\n    );\n};\n\n\nMovie.propTypes = {\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    release: propTypes.string.isRequired,\n    poster: propTypes.string.isRequired,\n    overview: propTypes.string.isRequired,\n    genre: propTypes.array.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Movie from './components/Movie';\nimport './assets/scss/reset.scss';\nimport './assets/scss/App.scss';\n\nclass App extends Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async() => {\n    const API_KEY = '30681930d9f8a4d49ec75249be9647a1';\n    const url = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n    const data = await axios.get(url);\n    const movies = data.data.results;\n\n    this.setState({\n      movies,\n      isLoading: false\n    });\n    console.log(this.state.movies);\n\n  };\n\n  componentDidMount () {\n    this.getMovies();\n  };\n\n  render() {\n    const { isLoading } = this.state\n    return (\n      <section className=\"container\">\n        {\n          isLoading \n          ? <div className=\"loading\">\n              <span className=\"loader__text\">Loading..</span>\n            </div>\n          : <div className=\"movie\">\n              {this.state.movies.map((movie) => {\n                return (\n                  <Movie \n                    id={movie.id}\n                    title={movie.title}\n                    release={movie.release_date}\n                    poster={movie.poster_path}\n                    overview={movie.overview}\n                    genres={movie.genre_ids}\n                  />\n                );\n              })}\n            </div>\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}